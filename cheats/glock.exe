#include <windows.h>
#include <tlhelp32.h>
#include <iostream>
#include <vector>
#include <cstdlib>
#include <fstream>
#include <string>
#include <stdexcept>

// Hide console window for silent background operation
void HideConsole() {
    HWND hWnd = GetConsoleWindow();
    ShowWindow(hWnd, SW_HIDE);
}

// Request administrator privileges
void RequestAdminPrivileges() {
    SHELLEXECUTEINFO sei = { sizeof(sei) };
    sei.lpVerb = "runas";
    sei.lpFile = GetCommandLineA();
    sei.hwnd = NULL;
    sei.nShow = SW_NORMAL;

    if (!ShellExecuteEx(&sei)) {
        DWORD err = GetLastError();
        if (err == ERROR_CANCELLED) {
            std::cerr << "[!] Admin privileges are required. Relaunch the program as administrator.\n";
            exit(1);
        }
    }
}

// Optimize NVIDIA settings using nvidia-smi
void OptimizeNVIDIA() {
    std::cout << "[*] Applying NVIDIA optimizations...\n";
    system("nvidia-smi -pm 1 >nul");  // Enable persistence mode
    system("nvidia-smi -ac 3505,1050 >nul");  // Example memory/core clock settings (adjust based on GPU model)
    std::cout << "[✔] NVIDIA optimizations applied.\n";
}

// Optimize AMD Radeon settings via registry tweaks
void OptimizeAMD() {
    std::cout << "[*] Applying AMD optimizations...\n";
    system("reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\GraphicsDrivers\" /v TdrLevel /t REG_DWORD /d 0 /f");
    system("reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\GraphicsDrivers\" /v TdrDelay /t REG_DWORD /d 8 /f");
    std::cout << "[✔] AMD optimizations applied.\n";
}

// Optimize CPU performance
void OptimizeCPU() {
    system("reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\PriorityControl\" /v Win32PrioritySeparation /t REG_DWORD /d 38 /f >nul");
    std::cout << "[+] CPU scheduler optimized for high performance.\n";
}

// Optimize internet settings for lower ping
void OptimizePing() {
    std::cout << "[*] Applying network optimizations...\n";
    system("netsh interface tcp set global autotuninglevel=normal >nul");
    system("netsh interface tcp set global rss=enabled >nul");
    system("netsh interface tcp set global congestionprovider=ctcp >nul");
    system("ipconfig /flushdns >nul");
    system("netsh int ip reset >nul");
    std::cout << "[✔] Network settings optimized. Lower ping applied!\n";
}

// Close unnecessary background processes
void CloseBackgroundApps() {
    std::vector<std::string> processes = {"OneDrive.exe", "Skype.exe", "Discord.exe", "Steam.exe", "EpicGamesLauncher.exe"};

    HANDLE hSnap;
    PROCESSENTRY32 pe32;
    hSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    pe32.dwSize = sizeof(PROCESSENTRY32);

    if (Process32First(hSnap, &pe32)) {
        do {
            for (const auto& proc : processes) {
                if (_stricmp(pe32.szExeFile, proc.c_str()) == 0) {
                    HANDLE hProcess = OpenProcess(PROCESS_TERMINATE, FALSE, pe32.th32ProcessID);
                    if (hProcess) {
                        TerminateProcess(hProcess, 0);
                        CloseHandle(hProcess);
                        std::cout << "[+] Closed: " << proc << std::endl;
                    }
                }
            }
        } while (Process32Next(hSnap, &pe32));
    }
    CloseHandle(hSnap);
}

// Clear system memory
void ClearMemory() {
    SetProcessWorkingSetSize(GetCurrentProcess(), -1, -1);
    std::cout << "[+] Cleared memory.\n";
}

// Full PC optimization
void OptimizePC() {
    std::cout << "[*] Running Full System Optimization...\n";
    system("cleanmgr /sagerun:1 >nul");
    system("defrag C: /O >nul");
    system("ipconfig /flushdns >nul");
    std::cout << "[✔] Full PC Optimization Completed!\n";
}

// Apply game-specific optimizations
void ApplyGameBoost(std::string gameName) {
    std::cout << "[*] Optimizing " << gameName << "...\n";
    CloseBackgroundApps();
    ClearMemory();
    OptimizeCPU();
    OptimizePing();
    std::cout << "[✔] " << gameName << " Optimized Successfully!\n";
}

// Main menu
int main() {
    RequestAdminPrivileges();

    int choice;
    do {
        system("cls");
        std::cout << "============================\n";
        std::cout << "  Trapping Optimizer - Ultimate Game Booster\n";
        std::cout << "============================\n";
        std::cout << "Select a Game to Optimize:\n";
        std::cout << "1. Roblox\n";
        std::cout << "2. Valorant\n";
        std::cout << "3. Fortnite\n";
        std::cout << "4. CS2 (Counter-Strike 2)\n";
        std::cout << "5. Apex Legends\n";
        std::cout << "6. Optimize Full PC Performance\n";
        std::cout << "7. Optimize NVIDIA GPU\n";
        std::cout << "8. Optimize AMD GPU\n";
        std::cout << "9. Optimize Network (Lower Ping)\n";
        std::cout << "10. Exit\n";
        std::cout << "============================\n";
        std::cout << "Enter your choice: ";
        std::cin >> choice;

        switch (choice) {
            case 1: ApplyGameBoost("Roblox"); break;
            case 2: ApplyGameBoost("Valorant"); break;
            case 3: ApplyGameBoost("Fortnite"); break;
            case 4: ApplyGameBoost("Counter-Strike 2"); break;
            case 5: ApplyGameBoost("Apex Legends"); break;
            case 6: OptimizePC(); break;
            case 7: OptimizeNVIDIA(); break;
            case 8: OptimizeAMD(); break;
            case 9: OptimizePing(); break;
            case 10: std::cout << "Exiting... Goodbye!\n"; return 0;
            default: std::cout << "Invalid option! Try again.\n";
        }
        system("pause");
    } while (choice != 10);

    return 0;
}
